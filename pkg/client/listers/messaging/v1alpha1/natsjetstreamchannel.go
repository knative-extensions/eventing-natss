/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing-natss/pkg/apis/messaging/v1alpha1"
)

// NatsJetStreamChannelLister helps list NatsJetStreamChannels.
// All objects returned here must be treated as read-only.
type NatsJetStreamChannelLister interface {
	// List lists all NatsJetStreamChannels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatsJetStreamChannel, err error)
	// NatsJetStreamChannels returns an object that can list and get NatsJetStreamChannels.
	NatsJetStreamChannels(namespace string) NatsJetStreamChannelNamespaceLister
	NatsJetStreamChannelListerExpansion
}

// natsJetStreamChannelLister implements the NatsJetStreamChannelLister interface.
type natsJetStreamChannelLister struct {
	indexer cache.Indexer
}

// NewNatsJetStreamChannelLister returns a new NatsJetStreamChannelLister.
func NewNatsJetStreamChannelLister(indexer cache.Indexer) NatsJetStreamChannelLister {
	return &natsJetStreamChannelLister{indexer: indexer}
}

// List lists all NatsJetStreamChannels in the indexer.
func (s *natsJetStreamChannelLister) List(selector labels.Selector) (ret []*v1alpha1.NatsJetStreamChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatsJetStreamChannel))
	})
	return ret, err
}

// NatsJetStreamChannels returns an object that can list and get NatsJetStreamChannels.
func (s *natsJetStreamChannelLister) NatsJetStreamChannels(namespace string) NatsJetStreamChannelNamespaceLister {
	return natsJetStreamChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NatsJetStreamChannelNamespaceLister helps list and get NatsJetStreamChannels.
// All objects returned here must be treated as read-only.
type NatsJetStreamChannelNamespaceLister interface {
	// List lists all NatsJetStreamChannels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatsJetStreamChannel, err error)
	// Get retrieves the NatsJetStreamChannel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NatsJetStreamChannel, error)
	NatsJetStreamChannelNamespaceListerExpansion
}

// natsJetStreamChannelNamespaceLister implements the NatsJetStreamChannelNamespaceLister
// interface.
type natsJetStreamChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NatsJetStreamChannels in the indexer for a given namespace.
func (s natsJetStreamChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NatsJetStreamChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatsJetStreamChannel))
	})
	return ret, err
}

// Get retrieves the NatsJetStreamChannel from the indexer for a given namespace and name.
func (s natsJetStreamChannelNamespaceLister) Get(name string) (*v1alpha1.NatsJetStreamChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("natsjetstreamchannel"), name)
	}
	return obj.(*v1alpha1.NatsJetStreamChannel), nil
}
